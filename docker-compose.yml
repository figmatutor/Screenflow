# 🐳 ScreenFlow Docker Compose Configuration
version: '3.8'

services:
  # 🎭 Playwright Screenshot Service
  playwright-service:
    build:
      context: ./docker/playwright-service
      dockerfile: Dockerfile
    container_name: screenflow-playwright
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - ALLOWED_ORIGINS=http://localhost:3000,https://screenflow.pro
    volumes:
      # 스크린샷 임시 저장소 (선택사항)
      - ./screenshots:/app/screenshots
      # 로그 저장소
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    networks:
      - screenflow-network

  # 🔄 Redis (캐싱 및 세션 관리)
  redis:
    image: redis:7-alpine
    container_name: screenflow-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - screenflow-network

  # 📊 Nginx (로드 밸런싱 및 프록시)
  nginx:
    image: nginx:alpine
    container_name: screenflow-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - playwright-service
    restart: unless-stopped
    networks:
      - screenflow-network

  # 📈 Monitoring (Prometheus + Grafana)
  prometheus:
    image: prom/prometheus:latest
    container_name: screenflow-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    networks:
      - screenflow-network

  grafana:
    image: grafana/grafana:latest
    container_name: screenflow-grafana
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - screenflow-network

# 📂 볼륨 정의
volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# 🌐 네트워크 정의
networks:
  screenflow-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
