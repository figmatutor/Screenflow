'use client';

import { useState, useCallback, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { ScrollArea } from '@/components/ui/scroll-area';
import { 
  Download, 
  Copy, 
  FolderOpen, 
  Zap, 
  Monitor, 
  Settings,
  ExternalLink,
  CheckCircle,
  AlertCircle,
  Loader2
} from 'lucide-react';
import { 
  isElectronEnvironment, 
  downloadFile, 
  downloadZipFile, 
  openDownloadFolder, 
  copyToClipboard,
  getAppInfo,
  ENVIRONMENT_CONFIG 
} from '@/lib/electron-utils';
import { createAutoCapturePoll, PollingManager } from '@/lib/polling-utils';

interface CrawledPage {
  url: string;
  title: string;
  filename: string;
  thumbnail?: string;
  success: boolean;
  error?: string;
  order: number;
  depth: number;
  links?: string[];
  capturedAt: Date;
}

interface CrawlResult {
  baseUrl: string;
  crawledPages: CrawledPage[];
  totalPages: number;
  successCount: number;
  failureCount: number;
}

type CaptureStep = 'input' | 'loading' | 'preview' | 'complete';

export function DesktopCaptureStudio() {
  // ÏÉÅÌÉú Í¥ÄÎ¶¨
  const [currentStep, setCurrentStep] = useState<CaptureStep>('input');
  const [url, setUrl] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [crawlResult, setCrawlResult] = useState<CrawlResult | null>(null);
  const [selectedPages, setSelectedPages] = useState<string[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [appInfo, setAppInfo] = useState<any>(null);
  
  // Ìè¥ÎßÅ Í¥ÄÎ¶¨Ïûê
  const [pollingManager, setPollingManager] = useState<PollingManager | null>(null);

  // Ïï± Ï†ïÎ≥¥ Î°úÎìú
  useEffect(() => {
    const loadAppInfo = async () => {
      const info = await getAppInfo();
      setAppInfo(info);
    };
    loadAppInfo();
  }, []);

  // Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏ Ïãú Ìè¥ÎßÅ Ï†ïÎ¶¨
  useEffect(() => {
    return () => {
      if (pollingManager) {
        pollingManager.stop();
      }
    };
  }, [pollingManager]);

  // ÏûêÎèô Ï∫°Ï≤ò ÏãúÏûë
  const startAutoCapture = useCallback(async () => {
    if (!url.trim()) {
      setError('URLÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    setIsLoading(true);
    setError(null);
    setCurrentStep('loading');

    try {
      console.log('[DesktopCapture] ÏûêÎèô Ï∫°Ï≤ò ÏãúÏûë:', url);

      const response = await fetch('/api/auto-capture', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ 
          url,
          options: {
            maxDepth: 1,
            maxPages: 5
          }
        })
      });

      if (!response.ok) {
        throw new Error('ÏûêÎèô Ï∫°Ï≤ò ÏöîÏ≤≠Ïù¥ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }

      const data = await response.json();
      console.log('[DesktopCapture] ÏÑ∏ÏÖò ÏÉùÏÑ± ÏôÑÎ£å:', data.sessionId);

      // Ìè¥ÎßÅ ÏãúÏûë
      const manager = createAutoCapturePoll(
        data.sessionId,
        // onProgress
        (progressData) => {
          console.log('[DesktopCapture] ÏßÑÌñâ ÏÉÅÌô©:', progressData);
        },
        // onCompleted
        (completedData) => {
          console.log('[DesktopCapture] Ï∫°Ï≤ò ÏôÑÎ£å:', completedData);
          setCrawlResult({
            baseUrl: completedData.baseUrl,
            crawledPages: completedData.crawledPages,
            totalPages: completedData.totalPages,
            successCount: completedData.successCount,
            failureCount: completedData.failureCount
          });

          // ÏÑ±Í≥µÌïú ÌéòÏù¥ÏßÄÎì§ÏùÑ Í∏∞Î≥∏ ÏÑ†ÌÉù
          const successfulPages = completedData.crawledPages
            .filter((page: CrawledPage) => page.success)
            .map((page: CrawledPage) => page.filename);
          setSelectedPages(successfulPages);

          setCurrentStep('preview');
          setIsLoading(false);
          setPollingManager(null);
        },
        // onFailed
        (errorMessage) => {
          console.error('[DesktopCapture] Ï∫°Ï≤ò Ïã§Ìå®:', errorMessage);
          setError(errorMessage);
          setCurrentStep('input');
          setIsLoading(false);
          setPollingManager(null);
        }
      );

      manager.start();
      setPollingManager(manager);

    } catch (error) {
      console.error('[DesktopCapture] ÏöîÏ≤≠ Ïã§Ìå®:', error);
      setError(error instanceof Error ? error.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
      setCurrentStep('input');
      setIsLoading(false);
    }
  }, [url]);

  // Í∞úÎ≥Ñ ÌååÏùº Îã§Ïö¥Î°úÎìú
  const handleDownloadSingle = useCallback(async (page: CrawledPage) => {
    try {
      console.log('[DesktopCapture] Í∞úÎ≥Ñ Îã§Ïö¥Î°úÎìú ÏãúÏûë:', page.filename);

      const response = await fetch(`/api/download?filename=${encodeURIComponent(page.filename)}`);
      if (!response.ok) {
        throw new Error('ÌååÏùº Îã§Ïö¥Î°úÎìú Ïã§Ìå®');
      }

      const blob = await response.blob();
      const reader = new FileReader();
      
      reader.onload = async () => {
        const base64Data = reader.result as string;
        const result = await downloadFile(base64Data, page.filename, 'image/png');
        
        if (result.success) {
          console.log('[DesktopCapture] Îã§Ïö¥Î°úÎìú ÏôÑÎ£å:', result.path);
        } else {
          console.error('[DesktopCapture] Îã§Ïö¥Î°úÎìú Ïã§Ìå®:', result.error);
          setError(result.error || 'Îã§Ïö¥Î°úÎìúÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
        }
      };
      
      reader.readAsDataURL(blob);
    } catch (error) {
      console.error('[DesktopCapture] Îã§Ïö¥Î°úÎìú Ïò§Î•ò:', error);
      setError(error instanceof Error ? error.message : 'Îã§Ïö¥Î°úÎìú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  }, []);

  // ÏÑ†ÌÉùÎêú ÌååÏùºÎì§ ZIP Îã§Ïö¥Î°úÎìú
  const handleDownloadSelected = useCallback(async () => {
    if (selectedPages.length === 0) {
      setError('Îã§Ïö¥Î°úÎìúÌï† ÌååÏùºÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    try {
      console.log('[DesktopCapture] ZIP Îã§Ïö¥Î°úÎìú ÏãúÏûë:', selectedPages.length, 'Í∞ú ÌååÏùº');

      const response = await fetch('/api/download-selected', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ 
          selectedFiles: selectedPages,
          baseUrl: crawlResult?.baseUrl 
        })
      });

      if (!response.ok) {
        throw new Error('ZIP Îã§Ïö¥Î°úÎìú Ïã§Ìå®');
      }

      const blob = await response.blob();
      const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
      const zipFilename = `screenflow-capture-${timestamp}.zip`;

      const result = await downloadZipFile(blob, zipFilename);
      
      if (result.success) {
        console.log('[DesktopCapture] ZIP Îã§Ïö¥Î°úÎìú ÏôÑÎ£å:', result.path);
        setCurrentStep('complete');
      } else {
        console.error('[DesktopCapture] ZIP Îã§Ïö¥Î°úÎìú Ïã§Ìå®:', result.error);
        setError(result.error || 'ZIP Îã§Ïö¥Î°úÎìúÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }
    } catch (error) {
      console.error('[DesktopCapture] ZIP Îã§Ïö¥Î°úÎìú Ïò§Î•ò:', error);
      setError(error instanceof Error ? error.message : 'ZIP Îã§Ïö¥Î°úÎìú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  }, [selectedPages, crawlResult]);

  // ÌÅ¥Î¶ΩÎ≥¥Îìú Î≥µÏÇ¨
  const handleCopyToClipboard = useCallback(async (page: CrawledPage) => {
    try {
      const response = await fetch(`/api/download?filename=${encodeURIComponent(page.filename)}`);
      if (!response.ok) {
        throw new Error('ÌååÏùº Î°úÎìú Ïã§Ìå®');
      }

      const blob = await response.blob();
      const reader = new FileReader();
      
      reader.onload = async () => {
        const dataUrl = reader.result as string;
        const success = await copyToClipboard(dataUrl, 'image');
        
        if (success) {
          console.log('[DesktopCapture] ÌÅ¥Î¶ΩÎ≥¥Îìú Î≥µÏÇ¨ ÏôÑÎ£å');
          // TODO: ÌÜ†Ïä§Ìä∏ ÏïåÎ¶º Ï∂îÍ∞Ä
        } else {
          setError('ÌÅ¥Î¶ΩÎ≥¥Îìú Î≥µÏÇ¨Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
        }
      };
      
      reader.readAsDataURL(blob);
    } catch (error) {
      console.error('[DesktopCapture] ÌÅ¥Î¶ΩÎ≥¥Îìú Î≥µÏÇ¨ Ïò§Î•ò:', error);
      setError(error instanceof Error ? error.message : 'ÌÅ¥Î¶ΩÎ≥¥Îìú Î≥µÏÇ¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  }, []);

  // ÌéòÏù¥ÏßÄ ÏÑ†ÌÉù/Ìï¥Ï†ú
  const togglePageSelection = useCallback((filename: string) => {
    setSelectedPages(prev => 
      prev.includes(filename) 
        ? prev.filter(f => f !== filename)
        : [...prev, filename]
    );
  }, []);

  // Ï†ÑÏ≤¥ ÏÑ†ÌÉù/Ìï¥Ï†ú
  const toggleSelectAll = useCallback(() => {
    if (!crawlResult) return;
    
    const successfulPages = crawlResult.crawledPages
      .filter(page => page.success)
      .map(page => page.filename);
    
    if (selectedPages.length === successfulPages.length) {
      setSelectedPages([]);
    } else {
      setSelectedPages(successfulPages);
    }
  }, [crawlResult, selectedPages]);

  // ÏÉàÎ°ú ÏãúÏûë
  const handleRestart = useCallback(() => {
    setCurrentStep('input');
    setUrl('');
    setCrawlResult(null);
    setSelectedPages([]);
    setError(null);
    setIsLoading(false);
    
    if (pollingManager) {
      pollingManager.stop();
      setPollingManager(null);
    }
  }, [pollingManager]);

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-6">
      <div className="max-w-6xl mx-auto space-y-6">
        {/* Ìó§Îçî */}
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <div>
                <CardTitle className="text-2xl font-bold text-gray-900">
                  üñ•Ô∏è ScreenFlow Desktop
                </CardTitle>
                <p className="text-gray-600 mt-1">
                  Î°úÏª¨ Ïä§ÌÅ¨Î¶∞ÏÉ∑ Ï∫°Ï≤ò Î∞è ÏûêÎèôÌôî ÎèÑÍµ¨
                </p>
              </div>
              <div className="flex items-center gap-4">
                {appInfo && (
                  <Badge variant="outline" className="text-xs">
                    v{appInfo.version} ({appInfo.platform})
                  </Badge>
                )}
                {ENVIRONMENT_CONFIG.isElectron && (
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={openDownloadFolder}
                    className="flex items-center gap-2"
                  >
                    <FolderOpen className="w-4 h-4" />
                    Îã§Ïö¥Î°úÎìú Ìè¥Îçî
                  </Button>
                )}
              </div>
            </div>
          </CardHeader>
        </Card>

        {/* ÌôòÍ≤Ω Ï†ïÎ≥¥ */}
        {ENVIRONMENT_CONFIG.isElectron && (
          <Card>
            <CardContent className="pt-6">
              <div className="flex items-center gap-4 text-sm text-gray-600">
                <div className="flex items-center gap-2">
                  <CheckCircle className="w-4 h-4 text-green-500" />
                  Îç∞Ïä§ÌÅ¨ÌÜ± ÌôòÍ≤Ω
                </div>
                <div className="flex items-center gap-2">
                  <CheckCircle className="w-4 h-4 text-green-500" />
                  Î°úÏª¨ ÌååÏùº Ï†ÄÏû•
                </div>
                <div className="flex items-center gap-2">
                  <CheckCircle className="w-4 h-4 text-green-500" />
                  Ìè¥Îçî ÏßÅÏ†ë Ïó¥Í∏∞
                </div>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Î©îÏù∏ ÏΩòÌÖêÏ∏† */}
        <Tabs value={currentStep} className="w-full">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="input" disabled={isLoading}>
              URL ÏûÖÎ†•
            </TabsTrigger>
            <TabsTrigger value="loading" disabled={!isLoading}>
              Ï∫°Ï≤ò Ï§ë
            </TabsTrigger>
            <TabsTrigger value="preview" disabled={!crawlResult}>
              ÎØ∏Î¶¨Î≥¥Í∏∞
            </TabsTrigger>
            <TabsTrigger value="complete" disabled={currentStep !== 'complete'}>
              ÏôÑÎ£å
            </TabsTrigger>
          </TabsList>

          {/* URL ÏûÖÎ†• Îã®Í≥Ñ */}
          <TabsContent value="input" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Zap className="w-5 h-5" />
                  ÏûêÎèô Ïä§ÌÅ¨Î¶∞ÏÉ∑ Ï∫°Ï≤ò
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <label className="text-sm font-medium">ÏõπÏÇ¨Ïù¥Ìä∏ URL</label>
                  <Input
                    type="url"
                    placeholder="https://example.com"
                    value={url}
                    onChange={(e) => setUrl(e.target.value)}
                    onKeyDown={(e) => e.key === 'Enter' && startAutoCapture()}
                    disabled={isLoading}
                  />
                </div>

                {error && (
                  <div className="flex items-center gap-2 p-3 bg-red-50 border border-red-200 rounded-lg">
                    <AlertCircle className="w-4 h-4 text-red-500" />
                    <span className="text-sm text-red-700">{error}</span>
                  </div>
                )}

                <Button
                  onClick={startAutoCapture}
                  disabled={!url.trim() || isLoading}
                  className="w-full"
                  size="lg"
                >
                  {isLoading ? (
                    <>
                      <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                      Ï∫°Ï≤ò Ï§ë...
                    </>
                  ) : (
                    <>
                      <Zap className="w-4 h-4 mr-2" />
                      ÏûêÎèô Ï∫°Ï≤ò ÏãúÏûë
                    </>
                  )}
                </Button>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Î°úÎî© Îã®Í≥Ñ */}
          <TabsContent value="loading" className="space-y-4">
            <Card>
              <CardContent className="pt-6">
                <div className="text-center space-y-4">
                  <Loader2 className="w-12 h-12 animate-spin mx-auto text-blue-500" />
                  <div>
                    <h3 className="text-lg font-semibold">ÌéòÏù¥ÏßÄÎ•º Ï∫°Ï≤òÌïòÍ≥† ÏûàÏäµÎãàÎã§...</h3>
                    <p className="text-gray-600">Ïû†ÏãúÎßå Í∏∞Îã§Î†§Ï£ºÏÑ∏Ïöî.</p>
                  </div>
                  <Progress value={33} className="w-full" />
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* ÎØ∏Î¶¨Î≥¥Í∏∞ Îã®Í≥Ñ */}
          <TabsContent value="preview" className="space-y-4">
            {crawlResult && (
              <Card>
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle>Ï∫°Ï≤ò Í≤∞Í≥º</CardTitle>
                    <div className="flex items-center gap-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={toggleSelectAll}
                      >
                        {selectedPages.length === crawlResult.crawledPages.filter(p => p.success).length 
                          ? 'Ï†ÑÏ≤¥ Ìï¥Ï†ú' : 'Ï†ÑÏ≤¥ ÏÑ†ÌÉù'}
                      </Button>
                      <Button
                        onClick={handleDownloadSelected}
                        disabled={selectedPages.length === 0}
                        className="flex items-center gap-2"
                      >
                        <Download className="w-4 h-4" />
                        ÏÑ†ÌÉùÎêú ÌååÏùº Îã§Ïö¥Î°úÎìú ({selectedPages.length})
                      </Button>
                    </div>
                  </div>
                  <div className="flex items-center gap-4 text-sm text-gray-600">
                    <span>Ï¥ù {crawlResult.totalPages}Í∞ú ÌéòÏù¥ÏßÄ</span>
                    <span className="text-green-600">ÏÑ±Í≥µ {crawlResult.successCount}Í∞ú</span>
                    {crawlResult.failureCount > 0 && (
                      <span className="text-red-600">Ïã§Ìå® {crawlResult.failureCount}Í∞ú</span>
                    )}
                  </div>
                </CardHeader>
                <CardContent>
                  <ScrollArea className="h-96">
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                      {crawlResult.crawledPages.map((page) => (
                        <Card key={page.filename} className={`${page.success ? 'border-green-200' : 'border-red-200'}`}>
                          <CardContent className="p-4">
                            <div className="space-y-3">
                              <div className="flex items-start justify-between">
                                <div className="flex-1 min-w-0">
                                  <h4 className="font-medium text-sm truncate">{page.title}</h4>
                                  <p className="text-xs text-gray-500 truncate">{page.url}</p>
                                </div>
                                {page.success && (
                                  <input
                                    type="checkbox"
                                    checked={selectedPages.includes(page.filename)}
                                    onChange={() => togglePageSelection(page.filename)}
                                    className="ml-2"
                                  />
                                )}
                              </div>

                              {page.thumbnail && (
                                <div className="aspect-video bg-gray-100 rounded overflow-hidden">
                                  <img
                                    src={page.thumbnail}
                                    alt={page.title}
                                    className="w-full h-full object-cover"
                                  />
                                </div>
                              )}

                              <div className="flex items-center justify-between">
                                <Badge variant={page.success ? "default" : "destructive"}>
                                  {page.success ? 'ÏÑ±Í≥µ' : 'Ïã§Ìå®'}
                                </Badge>
                                {page.success && (
                                  <div className="flex gap-1">
                                    <Button
                                      variant="outline"
                                      size="sm"
                                      onClick={() => handleDownloadSingle(page)}
                                    >
                                      <Download className="w-3 h-3" />
                                    </Button>
                                    <Button
                                      variant="outline"
                                      size="sm"
                                      onClick={() => handleCopyToClipboard(page)}
                                    >
                                      <Copy className="w-3 h-3" />
                                    </Button>
                                  </div>
                                )}
                              </div>

                              {page.error && (
                                <p className="text-xs text-red-600">{page.error}</p>
                              )}
                            </div>
                          </CardContent>
                        </Card>
                      ))}
                    </div>
                  </ScrollArea>
                </CardContent>
              </Card>
            )}
          </TabsContent>

          {/* ÏôÑÎ£å Îã®Í≥Ñ */}
          <TabsContent value="complete" className="space-y-4">
            <Card>
              <CardContent className="pt-6">
                <div className="text-center space-y-4">
                  <CheckCircle className="w-16 h-16 text-green-500 mx-auto" />
                  <div>
                    <h3 className="text-xl font-semibold">Îã§Ïö¥Î°úÎìú ÏôÑÎ£å!</h3>
                    <p className="text-gray-600">ÏÑ†ÌÉùÌïú ÌååÏùºÎì§Ïù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.</p>
                  </div>
                  <div className="flex justify-center gap-4">
                    {ENVIRONMENT_CONFIG.isElectron && (
                      <Button
                        variant="outline"
                        onClick={openDownloadFolder}
                        className="flex items-center gap-2"
                      >
                        <FolderOpen className="w-4 h-4" />
                        Îã§Ïö¥Î°úÎìú Ìè¥Îçî Ïó¥Í∏∞
                      </Button>
                    )}
                    <Button onClick={handleRestart}>
                      ÏÉàÎ°ú ÏãúÏûë
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}
